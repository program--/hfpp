name: Unit Testing

on:
  push:
    branches: [main]
    paths-ignore:
      - "README.md"
      - ".vscode/**"
  pull_request:
    branches: [main]
    paths-ignore:
      - "README.md"
      - ".vscode/**"

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        config:
          [
            {
              name: Ubuntu Latest GCC,
              os: ubuntu-latest,
              cpp_compiler: g++,
              build_type: Release,
            },

            {
              name: Ubuntu Latest Clang,
              os: ubuntu-latest,
              cpp_compiler: clang++,
              build_type: Release,
            },

            {
              name: macOS Latest Clang,
              os: macos-latest,
              cpp_compiler: clang++,
              build_type: Release,
            },
          ]

    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
          echo "compiler-flags=-fsanitize=address,undefined -O1 -g -fno-omit-frame-pointer --coverage" >> "$GITHUB_OUTPUT"

      - name: Configure CMake
        env:
          CFLAGS: ${{ steps.strings.outputs.compiler-flags }}
          CXXFLAGS: ${{ steps.strings.outputs.compiler-flags }}
        run: >
          cmake
          -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.config.cpp_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }}
          -S ${{ github.workspace }}

      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.config.build_type }}

      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: ctest --build-config ${{ matrix.config.build_type }}

      - name: Coverage
        if: ${{ matrix.config.cpp_compiler == 'g++' }}
        run: |
          pip install gcovr
          gcovr -s --coveralls report.json

      - name: Upload Report
        if: ${{ matrix.config.cpp_compiler == 'g++' }}
        env:
          OS: ${{ matrix.config.os }}
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./report.json
          env_vars: OS
          flags: unittests
          verbose: true
          fail_ci_if_error: true
